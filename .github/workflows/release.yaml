name: release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  REGISTRY: ghcr.io
  MANAGER_IMAGE_REPO: ${{ github.repository }}-manager
  ERASER_IMAGE_REPO: ${{ github.repository }}

jobs:
  build-publish-release:
    name: "release"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Run unit tests
        run: make test

      - name: Setup buildx instance
        uses: docker/setup-buildx-action@v1
        with:
          use: true

      - uses: actions/cache@v2
        with:
          key: ${{ runner.OS }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build

      - uses: crazy-max/ghaction-github-runtime@v1

      - name: Get tag
        run: |
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo $TAG

      - name: Build eraser-manager
        run: make docker-build CACHE_FROM=type=gha,scope=eraser-manager CACHE_TO=type=gha,scope=eraser-manager,mode=max IMG=${{ env.REGISTRY }}/${{ env.MANAGER_IMAGE_REPO }}:${TAG}

      - name: Build eraser
        run: make docker-build-eraser CACHE_FROM=type=gha,scope=eraser-node CACHE_TO=type=gha,scope=eraser-node,mode=max ERASER_IMG=${{ env.REGISTRY }}/${{ env.ERASER_IMAGE_REPO }}:${TAG}

      - name: Log in to the GHCR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish
        run: |
          make docker-push IMG=${{ env.REGISTRY }}/${{ env.MANAGER_IMAGE_REPO }}:${TAG}
          make docker-push-eraser ERASER_IMG=${{ env.REGISTRY }}/${{ env.ERASER_IMAGE_REPO }}:${TAG}
