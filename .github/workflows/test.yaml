name: test
on:
  push:
    paths-ignore:
      - "**.md"
      - "hack/**"
  pull_request:
    paths-ignore:
      - "**.md"
      - "hack/**"

jobs:
  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest

  test:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - uses: actions/cache@v2
        with:
          key: ${{ runner.OS }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Unit test
        run: make test

  e2e:
    name: "End to End Test"
    env:
      CLUSTER_NAME: e2e-cluster
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Setup buildx instance
        uses: docker/setup-buildx-action@v1
        with:
          use: true

      - uses: actions/cache@v2
        with:
          key: ${{ runner.OS }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build

      - uses: crazy-max/ghaction-github-runtime@v1

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.2.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          config: .github/workflows/config/kind-config.yaml

      - name: Build controller
        run: make docker-build CACHE_FROM=type=gha,scope=eraser-manager CACHE_TO=type=gha,scope=eraser-manager,mode=max IMG=ghcr.io/azure/eraser-manager:latest

      - name: Build eraser
        run: make docker-build-eraser CACHE_FROM=type=gha,scope=eraser-node CACHE_TO=type=gha,scope=eraser-node,mode=max ERASER_IMG=ghcr.io/azure/eraser:latest

      - name: Pull test image
        run: docker pull docker.io/library/hello-world:latest

      - name: Load controller and eraser image on the nodes of the cluster
        run: |
          kind load docker-image ghcr.io/azure/eraser-manager:latest --name ${{ env.CLUSTER_NAME }}
          kind load docker-image ghcr.io/azure/eraser:latest --name ${{ env.CLUSTER_NAME }}
          kind load docker-image docker.io/library/hello-world:latest --name ${{ env.CLUSTER_NAME }}

      - name: Get list of images from control-plane node
        run: |
          docker exec ${{ env.CLUSTER_NAME }}-control-plane ctr -n k8s.io images list
          docker exec ${{ env.CLUSTER_NAME }}-worker ctr -n k8s.io images list
          docker exec ${{ env.CLUSTER_NAME }}-worker2 ctr -n k8s.io images list

      - name: Generate manifests
        run: make generate manifests

      - name: Deploy images
        run: |
          make deploy IMG=ghcr.io/azure/eraser-manager:latest ERASER_IMG=ghcr.io/azure/eraser:latest
          kubectl wait --for condition=established --timeout=60s crd/imagelists.eraser.sh
          kubectl wait --for condition=established --timeout=60s crd/imagejobs.eraser.sh
          kubectl wait --for condition=established --timeout=60s crd/imagestatuses.eraser.sh

      - name: Deploy ImageList
        run: kubectl apply -f .github/workflows/config/test-imagelist.yaml

      - name: Get ImageList
        run: kubectl get imagelist -o yaml

      - name: Get ImageJob
        run: kubectl get imagejob -o yaml

      - name: Check if pods are scheduled on all nodes
        run: |
          ./.github/workflows/e2e-scripts/checkifpodfitnode.sh ${{ env.CLUSTER_NAME }}

      - name: Check if pods are complete
        run: |
          ./.github/workflows/e2e-scripts/checkifpodsarecomplete.sh ${{ env.CLUSTER_NAME }}

      - name: Check if test image is removed
        run: |
          ./.github/workflows/e2e-scripts/checktestimagewasremoved.sh ${{ env.CLUSTER_NAME }}
